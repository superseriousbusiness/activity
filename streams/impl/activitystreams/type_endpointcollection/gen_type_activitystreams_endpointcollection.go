// Code generated by astool. DO NOT EDIT.

package typeendpointcollection

import (
	"fmt"
	vocab "github.com/superseriousbusiness/activity/streams/vocab"
	"strings"
)

// A json object which maps additional (typically server/domain-wide) endpoints
// which may be useful either for this actor or someone referencing this
// actor. This mapping may be nested inside the actor document as the value or
// may be a link to a JSON-LD document with these properties.
type ActivityStreamsEndpointCollection struct {
	JSONLDId                   vocab.JSONLDIdProperty
	ActivityStreamsSharedInbox vocab.ActivityStreamsSharedInboxProperty
	JSONLDType                 vocab.JSONLDTypeProperty
	alias                      string
	unknown                    map[string]interface{}
}

// ActivityStreamsEndpointCollectionExtends returns true if the EndpointCollection
// type extends from the other type.
func ActivityStreamsEndpointCollectionExtends(other vocab.Type) bool {
	// Shortcut implementation: this does not extend anything.
	return false
}

// DeserializeEndpointCollection creates a EndpointCollection from a map
// representation that has been unmarshalled from a text or binary format.
func DeserializeEndpointCollection(m map[string]interface{}, aliasMap map[string]string) (*ActivityStreamsEndpointCollection, error) {
	alias := ""
	aliasPrefix := ""
	if a, ok := aliasMap["https://www.w3.org/ns/activitystreams"]; ok {
		alias = a
		aliasPrefix = a + ":"
	}
	this := &ActivityStreamsEndpointCollection{
		alias:   alias,
		unknown: make(map[string]interface{}),
	}
	if typeValue, ok := m["type"]; !ok {
		return nil, fmt.Errorf("no \"type\" property in map")
	} else if typeString, ok := typeValue.(string); ok {
		typeName := strings.TrimPrefix(typeString, aliasPrefix)
		if typeName != "EndpointCollection" {
			return nil, fmt.Errorf("\"type\" property is not of %q type: %s", "EndpointCollection", typeName)
		}
		// Fall through, success in finding a proper Type
	} else if arrType, ok := typeValue.([]interface{}); ok {
		found := false
		for _, elemVal := range arrType {
			if typeString, ok := elemVal.(string); ok && strings.TrimPrefix(typeString, aliasPrefix) == "EndpointCollection" {
				found = true
				break
			}
		}
		if !found {
			return nil, fmt.Errorf("could not find a \"type\" property of value %q", "EndpointCollection")
		}
		// Fall through, success in finding a proper Type
	} else {
		return nil, fmt.Errorf("\"type\" property is unrecognized type: %T", typeValue)
	}
	// Begin: Known property deserialization
	if p, err := mgr.DeserializeIdPropertyJSONLD()(m, aliasMap); err != nil {
		return nil, err
	} else if p != nil {
		this.JSONLDId = p
	}
	if p, err := mgr.DeserializeSharedInboxPropertyActivityStreams()(m, aliasMap); err != nil {
		return nil, err
	} else if p != nil {
		this.ActivityStreamsSharedInbox = p
	}
	if p, err := mgr.DeserializeTypePropertyJSONLD()(m, aliasMap); err != nil {
		return nil, err
	} else if p != nil {
		this.JSONLDType = p
	}
	// End: Known property deserialization

	// Begin: Unknown deserialization
	for k, v := range m {
		// Begin: Code that ensures a property name is unknown
		if k == "id" {
			continue
		} else if k == "sharedInbox" {
			continue
		} else if k == "type" {
			continue
		} // End: Code that ensures a property name is unknown

		this.unknown[k] = v
	}
	// End: Unknown deserialization

	return this, nil
}

// EndpointCollectionIsDisjointWith returns true if the other provided type is
// disjoint with the EndpointCollection type.
func EndpointCollectionIsDisjointWith(other vocab.Type) bool {
	disjointWith := []string{"Accept", "Activity", "Add", "Announce", "Application", "Arrive", "Article", "Audio", "Block", "Branch", "Collection", "CollectionPage", "Commit", "Create", "Delete", "Dislike", "Document", "Emoji", "Event", "Flag", "Follow", "Group", "IdentityProof", "Ignore", "Image", "IntransitiveActivity", "Invite", "Join", "Leave", "Like", "Listen", "Move", "Note", "Object", "Offer", "OrderedCollection", "OrderedCollectionPage", "OrderedCollectionPage", "Organization", "Page", "Person", "Place", "Profile", "Push", "Question", "Read", "Reject", "Relationship", "Remove", "Repository", "Service", "TentativeAccept", "TentativeReject", "Ticket", "TicketDependency", "Tombstone", "Travel", "Undo", "Update", "Video", "View"}
	for _, disjoint := range disjointWith {
		if disjoint == other.GetTypeName() {
			return true
		}
	}
	return false
}

// EndpointCollectionIsExtendedBy returns true if the other provided type extends
// from the EndpointCollection type. Note that it returns false if the types
// are the same; see the "IsOrExtendsEndpointCollection" variant instead.
func EndpointCollectionIsExtendedBy(other vocab.Type) bool {
	// Shortcut implementation: is not extended by anything.
	return false
}

// IsOrExtendsEndpointCollection returns true if the other provided type is the
// EndpointCollection type or extends from the EndpointCollection type.
func IsOrExtendsEndpointCollection(other vocab.Type) bool {
	if other.GetTypeName() == "EndpointCollection" {
		return true
	}
	return EndpointCollectionIsExtendedBy(other)
}

// NewActivityStreamsEndpointCollection creates a new EndpointCollection type
func NewActivityStreamsEndpointCollection() *ActivityStreamsEndpointCollection {
	typeProp := typePropertyConstructor()
	typeProp.AppendXMLSchemaString("EndpointCollection")
	return &ActivityStreamsEndpointCollection{
		JSONLDType: typeProp,
		alias:      "",
		unknown:    make(map[string]interface{}),
	}
}

// GetActivityStreamsSharedInbox returns the "sharedInbox" property if it exists,
// and nil otherwise.
func (this ActivityStreamsEndpointCollection) GetActivityStreamsSharedInbox() vocab.ActivityStreamsSharedInboxProperty {
	return this.ActivityStreamsSharedInbox
}

// GetJSONLDId returns the "id" property if it exists, and nil otherwise.
func (this ActivityStreamsEndpointCollection) GetJSONLDId() vocab.JSONLDIdProperty {
	return this.JSONLDId
}

// GetJSONLDType returns the "type" property if it exists, and nil otherwise.
func (this ActivityStreamsEndpointCollection) GetJSONLDType() vocab.JSONLDTypeProperty {
	return this.JSONLDType
}

// GetTypeName returns the name of this type.
func (this ActivityStreamsEndpointCollection) GetTypeName() string {
	return "EndpointCollection"
}

// GetUnknownProperties returns the unknown properties for the EndpointCollection
// type. Note that this should not be used by app developers. It is only used
// to help determine which implementation is LessThan the other. Developers
// who are creating a different implementation of this type's interface can
// use this method in their LessThan implementation, but routine ActivityPub
// applications should not use this to bypass the code generation tool.
func (this ActivityStreamsEndpointCollection) GetUnknownProperties() map[string]interface{} {
	return this.unknown
}

// IsExtending returns true if the EndpointCollection type extends from the other
// type.
func (this ActivityStreamsEndpointCollection) IsExtending(other vocab.Type) bool {
	return ActivityStreamsEndpointCollectionExtends(other)
}

// JSONLDContext returns the JSONLD URIs required in the context string for this
// type and the specific properties that are set. The value in the map is the
// alias used to import the type and its properties.
func (this ActivityStreamsEndpointCollection) JSONLDContext() map[string]string {
	m := map[string]string{"https://www.w3.org/ns/activitystreams": this.alias}
	m = this.helperJSONLDContext(this.JSONLDId, m)
	m = this.helperJSONLDContext(this.ActivityStreamsSharedInbox, m)
	m = this.helperJSONLDContext(this.JSONLDType, m)

	return m
}

// LessThan computes if this EndpointCollection is lesser, with an arbitrary but
// stable determination.
func (this ActivityStreamsEndpointCollection) LessThan(o vocab.ActivityStreamsEndpointCollection) bool {
	// Begin: Compare known properties
	// Compare property "id"
	if lhs, rhs := this.JSONLDId, o.GetJSONLDId(); lhs != nil && rhs != nil {
		if lhs.LessThan(rhs) {
			return true
		} else if rhs.LessThan(lhs) {
			return false
		}
	} else if lhs == nil && rhs != nil {
		// Nil is less than anything else
		return true
	} else if rhs != nil && rhs == nil {
		// Anything else is greater than nil
		return false
	} // Else: Both are nil
	// Compare property "sharedInbox"
	if lhs, rhs := this.ActivityStreamsSharedInbox, o.GetActivityStreamsSharedInbox(); lhs != nil && rhs != nil {
		if lhs.LessThan(rhs) {
			return true
		} else if rhs.LessThan(lhs) {
			return false
		}
	} else if lhs == nil && rhs != nil {
		// Nil is less than anything else
		return true
	} else if rhs != nil && rhs == nil {
		// Anything else is greater than nil
		return false
	} // Else: Both are nil
	// Compare property "type"
	if lhs, rhs := this.JSONLDType, o.GetJSONLDType(); lhs != nil && rhs != nil {
		if lhs.LessThan(rhs) {
			return true
		} else if rhs.LessThan(lhs) {
			return false
		}
	} else if lhs == nil && rhs != nil {
		// Nil is less than anything else
		return true
	} else if rhs != nil && rhs == nil {
		// Anything else is greater than nil
		return false
	} // Else: Both are nil
	// End: Compare known properties

	// Begin: Compare unknown properties (only by number of them)
	if len(this.unknown) < len(o.GetUnknownProperties()) {
		return true
	} else if len(o.GetUnknownProperties()) < len(this.unknown) {
		return false
	} // End: Compare unknown properties (only by number of them)

	// All properties are the same.
	return false
}

// Serialize converts this into an interface representation suitable for
// marshalling into a text or binary format.
func (this ActivityStreamsEndpointCollection) Serialize() (map[string]interface{}, error) {
	m := make(map[string]interface{})
	typeName := "EndpointCollection"
	if len(this.alias) > 0 {
		typeName = this.alias + ":" + "EndpointCollection"
	}
	m["type"] = typeName
	// Begin: Serialize known properties
	// Maybe serialize property "id"
	if this.JSONLDId != nil {
		if i, err := this.JSONLDId.Serialize(); err != nil {
			return nil, err
		} else if i != nil {
			m[this.JSONLDId.Name()] = i
		}
	}
	// Maybe serialize property "sharedInbox"
	if this.ActivityStreamsSharedInbox != nil {
		if i, err := this.ActivityStreamsSharedInbox.Serialize(); err != nil {
			return nil, err
		} else if i != nil {
			m[this.ActivityStreamsSharedInbox.Name()] = i
		}
	}
	// Maybe serialize property "type"
	if this.JSONLDType != nil {
		if i, err := this.JSONLDType.Serialize(); err != nil {
			return nil, err
		} else if i != nil {
			m[this.JSONLDType.Name()] = i
		}
	}
	// End: Serialize known properties

	// Begin: Serialize unknown properties
	for k, v := range this.unknown {
		// To be safe, ensure we aren't overwriting a known property
		if _, has := m[k]; !has {
			m[k] = v
		}
	}
	// End: Serialize unknown properties

	return m, nil
}

// SetActivityStreamsSharedInbox sets the "sharedInbox" property.
func (this *ActivityStreamsEndpointCollection) SetActivityStreamsSharedInbox(i vocab.ActivityStreamsSharedInboxProperty) {
	this.ActivityStreamsSharedInbox = i
}

// SetJSONLDId sets the "id" property.
func (this *ActivityStreamsEndpointCollection) SetJSONLDId(i vocab.JSONLDIdProperty) {
	this.JSONLDId = i
}

// SetJSONLDType sets the "type" property.
func (this *ActivityStreamsEndpointCollection) SetJSONLDType(i vocab.JSONLDTypeProperty) {
	this.JSONLDType = i
}

// VocabularyURI returns the vocabulary's URI as a string.
func (this ActivityStreamsEndpointCollection) VocabularyURI() string {
	return "https://www.w3.org/ns/activitystreams"
}

// helperJSONLDContext obtains the context uris and their aliases from a property,
// if it is not nil.
func (this ActivityStreamsEndpointCollection) helperJSONLDContext(i jsonldContexter, toMerge map[string]string) map[string]string {
	if i == nil {
		return toMerge
	}
	for k, v := range i.JSONLDContext() {
		/*
		   Since the literal maps in this function are determined at
		   code-generation time, this loop should not overwrite an existing key with a
		   new value.
		*/
		toMerge[k] = v
	}
	return toMerge
}
